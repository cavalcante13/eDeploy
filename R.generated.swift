//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `PontuationListViewController`.
    static let pontuationListViewController = _R.nib._PontuationListViewController()
    /// Nib `SearchListTableViewCell`.
    static let searchListTableViewCell = _R.nib._SearchListTableViewCell()
    /// Nib `SearchListViewController`.
    static let searchListViewController = _R.nib._SearchListViewController()
    /// Nib `SearchViewController`.
    static let searchViewController = _R.nib._SearchViewController()
    
    /// `UINib(name: "PontuationListViewController", in: bundle)`
    static func pontuationListViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pontuationListViewController)
    }
    
    /// `UINib(name: "SearchListTableViewCell", in: bundle)`
    static func searchListTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchListTableViewCell)
    }
    
    /// `UINib(name: "SearchListViewController", in: bundle)`
    static func searchListViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchListViewController)
    }
    
    /// `UINib(name: "SearchViewController", in: bundle)`
    static func searchViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `SearchListTableViewCell`.
    static let searchListTableViewCell: Rswift.ReuseIdentifier<SearchListTableViewCell> = Rswift.ReuseIdentifier(identifier: "SearchListTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 4 localization tables.
  struct string {
    /// This `R.string.endPoint` struct is generated, and contains static references to 2 localization keys.
    struct endPoint {
      /// Value: http://wsteste.devedp.com.br/Master/CidadeServico.svc/rest/BuscaPontos
      static let buscarPontos = Rswift.StringResource(key: "BuscarPontos", tableName: "EndPoint", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: http://wsteste.devedp.com.br/Master/CidadeServico.svc/rest/BuscaTodasCidades
      static let buscarTodasCidades = Rswift.StringResource(key: "BuscarTodasCidades", tableName: "EndPoint", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: http://wsteste.devedp.com.br/Master/CidadeServico.svc/rest/BuscaPontos
      static func buscarPontos(_: Void = ()) -> String {
        return NSLocalizedString("BuscarPontos", tableName: "EndPoint", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: http://wsteste.devedp.com.br/Master/CidadeServico.svc/rest/BuscaTodasCidades
      static func buscarTodasCidades(_: Void = ()) -> String {
        return NSLocalizedString("BuscarTodasCidades", tableName: "EndPoint", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.pontuationListViewController` struct is generated, and contains static references to 2 localization keys.
    struct pontuationListViewController {
      /// Value: A pontuação da cidade de %@ é %@
      static let aPontuaçãoDaCidadeÉ = Rswift.StringResource(key: "A pontuação da cidade %@ é %@", tableName: "PontuationListViewController", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Resultado
      static let resultado = Rswift.StringResource(key: "Resultado", tableName: "PontuationListViewController", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: A pontuação da cidade de %@ é %@
      static func aPontuaçãoDaCidadeÉ(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("A pontuação da cidade %@ é %@", tableName: "PontuationListViewController", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: Resultado
      static func resultado(_: Void = ()) -> String {
        return NSLocalizedString("Resultado", tableName: "PontuationListViewController", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.searchListViewController` struct is generated, and contains static references to 1 localization keys.
    struct searchListViewController {
      /// Value: Resultado
      static let resultado = Rswift.StringResource(key: "Resultado", tableName: "SearchListViewController", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Resultado
      static func resultado(_: Void = ()) -> String {
        return NSLocalizedString("Resultado", tableName: "SearchListViewController", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.searchViewController` struct is generated, and contains static references to 1 localization keys.
    struct searchViewController {
      /// Value: Busca
      static let busca = Rswift.StringResource(key: "Busca", tableName: "SearchViewController", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Busca
      static func busca(_: Void = ()) -> String {
        return NSLocalizedString("Busca", tableName: "SearchViewController", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    struct _PontuationListViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PontuationListViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SearchListTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SearchListTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "SearchListTableViewCell"
      let name = "SearchListTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SearchListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchListTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SearchListViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchListViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SearchViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
